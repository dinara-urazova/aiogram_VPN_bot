import json
import logging
import uuid
from urllib.parse import urlencode, quote
from pyxui_async import XUI
from pyxui_async.errors import BadLogin
from bot.config_reader import env_config

xui = XUI(full_address=env_config.panel_url, panel="sanaei", session_string=None)


async def get_client_key(telegram_id):
    try:
        # logging.info("Login started")
        username = env_config.panel_username
        password = env_config.panel_password.get_secret_value()
        response = await xui.login(username, password)
        if response is not True:
            # logging.error("‚ùå Login failed")
            return None
        # logging.info("üî• Successful login")
        # logging.info("–î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞...")
        client_uuid = str(uuid.uuid4())
        add_client_response = await xui.add_client(
            inbound_id=1,
            email=telegram_id,
            uuid=client_uuid,
            enable=True,
            flow="xtls-rprx-vision",
        )
        if not add_client_response.get("success", False):  # –¥–± "success": True
            # logging.error(f"‚ùå Adding client failed")
            return None
        # logging.info("‚úÖ Adding client succeeded")
        # logging.info("üîë Getting the key")
        inbound_list = await xui.get_inbound(inbound_id=1)  # —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
        if not inbound_list.get("success", False):
            # logging.error(f"‚ùå Getting the inbound list failed")
            return None
        # logging.info("‚ùóÔ∏è Got the inbound list")
        key_string = await build_vless_key(inbound_list, client_uuid)
        return key_string

    except BadLogin:
        # logging.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ XUI.")
        return None
    except Exception as e:
        # logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}")
        print(f"Error={e}")
        return None


async def build_vless_key(inbound_list: dict, client_uuid):
    obj = inbound_list["obj"]
    settings = json.loads(
        obj["settings"]
    )  # –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ settings –ø–æ –∫–ª—é—á—É –∏ –ø–∞—Ä—Å–∏–º –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ settings - —Å—Ç—Ä–æ–∫–∞ json
    logging.info(f"Settings={settings}")
    stream_settings = json.loads(obj["streamSettings"])
    clients = settings["clients"]
    client = None  # –º–æ–∂–Ω–æ –∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π client = next((c for c in clients if c["id"] == client_uuid), None), next –∑–¥–µ—Å—å –≤—ã–±–∏—Ä–∞–µ—Ç 1 –≤—Å—Ç—Ä–µ—Ç–∏–≤—à–∏–π—Å—è —ç–∫–∑ (–∫–∞–∫ break), –≤ –ø—Ä–æ—Ç —Å–ª—É—á–∞–µ - None –∫–∞–∫ –≤ —Å–ª–æ–≤–∞—Ä–Ω–æ–º –º–µ—Ç–æ–¥–µ get
    for c in clients:
        if c["id"] == client_uuid:
            client = c
            break
    if client is None:
        # logging.error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ inbound")
        return None

    config = {
        "id": client["id"],
        "ps": obj["remark"],  # –ª–∏–±–æ SklyarovBot[client.id]
        "add": "3x-rus.olegsklyarov.ru",
        "port": obj["port"],
    }

    data = {
        "type": stream_settings["network"],
        "security": stream_settings["security"],
        "pbk": stream_settings["realitySettings"]["settings"]["publicKey"],
        "fp": stream_settings["realitySettings"]["settings"]["fingerprint"],
        "sni": stream_settings["realitySettings"]["serverNames"][0],
        "sid": stream_settings["realitySettings"]["shortIds"][0],
        "spx": stream_settings["realitySettings"]["settings"]["spiderX"],
        "flow": client["flow"],
    }

    query_str = urlencode(data)
    ps_encoded = quote(config["ps"])
    key_string = f"vless://{config['id']}@{config['add']}:{config['port']}?{query_str}#{ps_encoded}"
    logging.info(f"‚ö°Ô∏è Congrats!. Here's the key={key_string}")
    return key_string
